
" ~/.vimrc
"

"
" Compatability {{{
" -----------------------------------------------------------------------------

set nocompatible         " use vim defaults instead of vi
set encoding=utf-8       " always encode in utf

" }}}
"
" " Load Plugins {{{
" " -----------------------------------------------------------------------------

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" VimProc
NeoBundle 'Shougo/vimproc.vim', {
  \ 'build' : {
  \   'mac' : 'make -f make_mac.mak',
  \   'unix': 'make -f make_unix.mak'
  \   }
  \ }

" Themes
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'bling/vim-airline'

" Extensions
NeoBundle 'Shougo/unite.vim'
NeoBundle 'stayradiated/vimfiler.vim'

" " Editing
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'godlygeek/tabular'

" Languages
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'nelstrom/vim-markdown-folding'

" Filetype dectection
filetype plugin indent on

" Check plugins
NeoBundleCheck

"
" }}}
"
" Settings {{{
" -----------------------------------------------------------------------------
"
" Enable syntax highlighting
syntax on

" General
set backspace=2          " enable <BS> for everything
set scrolloff=3          " minimum lines at top/bottom when scrolling
set completeopt-=preview " don't show preview window
set fcs=vert:â”‚,fold:-    " solid instead of broken line for vert splits
set hidden               " hide when switching buffers, don't unload
set laststatus=2         " always show the status line
set lazyredraw           " don't update screen when executing macros
set mouse=a              " enable mouse in all modes
set number               " show absolute line number on current line
set showcmd              " show command on last line of screen
set noshowmode           " hide mode
set noshowmatch          " don't show bracket matches
set spelllang=en_nz      " spell check with New Zealand English
set title                " use filename in window title
set wildmenu             " enhanced cmd line completion
set gdefault             " replace everything by default
set autochdir            " change directory to current buffer when opening files
set linespace=0          " make font look a bit better
set visualbell           " stop the beep

if has('macunix')
  " CodeKit Compatibility
  set nobackup
  set nowritebackup
  set noswapfile
else
  " Backup swap files
  set backup
  set backupdir=~/.vim/tmp
  set backupskip=/tmp/*,/private/tmp/*
  set directory=~/.vim/tmp
  set writebackup
endif

" Folding
set foldignore=          " don't ignore anything when folding
set foldlevelstart=99    " no folds closed on open
set foldmethod=marker    " collapse code using markers

" Tabs
set autoindent           " copy indent from previous line
set expandtab            " replace tabs with spaces
set shiftwidth=2         " spaces for autoindenting
set smarttab             " <BS> removes shiftwidth worth of spaces
set softtabstop=2        " spaces for editing, e.g. <Tab> or <BS>
set tabstop=2            " spaces for <Tab>

" Searches
set hlsearch             " highlight search results
set incsearch            " search whilst typing
set ignorecase           " case insensitive searching
set smartcase            " override ignorecase if upper case typed

" Colours
set t_Co=256
let g:hybrid_use_Xresources=1

set background=dark
colorscheme hybrid

" Fix escape key lag in terminal
set timeoutlen=1000
set ttimeoutlen=0

" gVim
if has('gui_running')

  " Hide GUI
  set guioptions-=m      " remove menu
  set guioptions-=T      " remove toolbar
  set guioptions-=r      " remove right scrollbar
  set guioptions-=b      " remove bottom scrollbar
  set guioptions-=L      " remove left scrollbar

  " Paste from PRIMARY and CLIPBOARD
  inoremap <silent> <M-v> <Esc>"+p`]a
  inoremap <silent> <S-Insert> <Esc>"*p`]a

  " Fonts
  if has('macunix')
    set guifont=Tamzen7x14:h14
  else
    set guifont=Meslo\ LG\ M\ DZ\ 12
  endif

" Terminal vim
else

  " Scrolling
  " map <ScrollWheelUp> <C-Y>
  " map <ScrollWheelDown> <C-E>

endif

" Toggle cursor shape in iTerm2
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
elseif &term =~ "xterm"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" vimdiff
if &diff
  set diffopt=filler,foldcolumn:0
endif

" Netrw settings
let g:netrw_liststyle=3    " Use tree-mode as default
let g:netrw_browse_split=4 " Open file in previous buffer
let g:netrw_preview=1      " Show preview in a vertical split
let g:netrw_altv=1
let g:netrw_list_hide = ".git,.sass-cache,.*"

" }}}
"
" Mappings {{{
" -----------------------------------------------------------------------------

" Map Leader
let mapleader = ","

" Remap Tab to %
nnoremap <tab> %
vnoremap <tab> %

" Toggle fold
nnoremap <space> za

" Toggle hlsearch for current results
nnoremap <leader>h :nohlsearch<CR>

" Search for trailing whitespace
nnoremap <leader>w /\s\+$<CR>

" Toggle last active bufer
nnoremap <leader><Tab> :b#<CR>

" Delete a buffer without closing the window
nnoremap <leader>d :bp<bar>sp<bar>bn<bar>bd<CR>

" Split windows
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Remember selection when indenting
vnoremap > >gv
vnoremap < <gv

" Better movement over wrapped lines
nnoremap j gj
nnoremap k gk

" Paste mode for terminals
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>

nnoremap <leader>m :call ToggleColorscheme()<CR>

" Shortcut for Tabularize
vnoremap <leader>t :Tabularize /

" Check file for errors
nnoremap <leader>c :SyntasticCheck<CR>

" Show Quickfix window for Syntastic errors
nnoremap <leader>E :Errors<CR>

" Unite.vim
nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async<CR>
nnoremap <leader>T :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<CR>
nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<CR>
nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<CR>
nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    -start-insert history/yank<CR>
nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer  -start-insert buffer<CR>
nnoremap <leader>/ :<C-u>Unite -no-split -buffer-name=buffer  -start-insert grep:.<CR>

" Vimfiler
nnoremap <leader><space> :VimFilerExplorer<CR>
noremap <buffer> <C-l> <C-w>l

" Keep search pattern at the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" }}}
"
" Plugin Settings {{{
" -----------------------------------------------------------------------------

" Syntastic
let g:syntastic_javascript_checkers=['jshint']

" Status line
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_theme = 'base16'

" VimFiler
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_enable_auto_cd = 1

" Unite
let g:unite_source_history_yank_enable = 1
let g:unite_source_file_rec_ignore_pattern = '\%(node_modules\/\|.sass-cache\/\|.git\/\)'

" Let's use ag
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
let g:unite_source_grep_recursive_opt = ''

call unite#filters#matcher_default#use(['matcher_fuzzy'])

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  " Reload directory contents
  imap <buffer> <C-r>   <Plug>(unite_redraw)
endfunction

" }}}
"
" Autocommands {{{
" -----------------------------------------------------------------------------

" Indent rules
autocmd FileType markdown setlocal ts=4 sw=4 sts=4 tw=79
autocmd FileType python setlocal ts=4 sw=4 sts=4

" Folding rules
autocmd FileType c,cpp setlocal foldmethod=syntax
autocmd FileType coffee setlocal foldmethod=indent nofoldenable

" }}}
"
" Functions {{{
" -----------------------------------------------------------------------------

function! ToggleColorscheme()
  if &background == 'dark'
    set background=light
    colorscheme Tomorrow
  else
    set background=dark
    colorscheme Tomorrow-Night
  endif
endfunction

" Compatible with ranger 1.4.2 through 1.6.*
"
" Add ranger as a file chooser in vim
"
" If you add this code to the .vimrc, ranger can be started using the command
" ":RagerChooser" or the keybinding "<leader>r".  Once you select one or more
" files, press enter and ranger will quit again and vim will open the selected
" files.

function! RangeChooser()
    let temp = tempname()
    " The option "--choosefiles" was added in ranger 1.5.1. Use the next line
    " with ranger 1.4.2 through 1.5.0 instead.
    "exec 'silent !ranger --choosefile=' . shellescape(temp)
    exec 'silent !ranger --choosefiles=' . shellescape(temp)
    if !filereadable(temp)
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
endfunction
command! -bar RangerChooser call RangeChooser()
nnoremap <leader>r :<C-U>RangerChooser<CR>

" }}}
