#!/usr/bin/env node

const { exec } = require('child_process')

const getMirrorList = async () => {
  const response = await fetch("https://raw.githubusercontent.com/void-linux/xmirror/master/mirrors.yaml")
  const yaml = await response.text()

  const lines = yaml.trim().split('\n')
  const urls = lines.filter((line) => {
    return line.includes('base_url')
  }).map((line) => {
    const index = line.indexOf('http')
    return line.slice(index)
  })

  return urls
}

const getAvgPing = async (url) => {
   return new Promise((resolve, reject) => {
      exec(`ping -c 4 ${url}`, (err, stdout) => {
         if (err) {
            reject(err)
         } else {
            const lastLine = stdout.split('\n').slice(-2)[0]

            // format: "rtt min/avg/max/mdev = 56.076/57.421/57.929/0.778 ms"
            const avg = lastLine.match(/[\d.]+/g)?.[1]
            if (!avg) {
               reject(new Error(`Could not parse ping results for "${url}"`))
            }
            resolve(Number.parseFloat(avg))
         }
      })
   })
}

void (async () => {
  const mirrorList = await getMirrorList()

   let fastestPing = Infinity
   let fastestMirror = ''

   for (const mirror of mirrorList) {
      const {hostname} = new URL(mirror)
       try {
        const ping = await getAvgPing(hostname)
        console.log(mirror, `${ping}ms`)
        if (ping < fastestPing) {
           fastestPing = ping
           fastestMirror = mirror
        }
       } catch (error) {
         console.log(mirror, `ERROR`, error)
       }
   }

   console.log(`\nFastest mirror is "${fastestMirror}" @ ${fastestPing}ms`)
   console.log(`\necho "repository=${fastestMirror}current" | sudo tee /etc/xbps.d/00-repository-main.conf`)
})()
