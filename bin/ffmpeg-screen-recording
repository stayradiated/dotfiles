#!/usr/bin/env zsh

set -euxo pipefail

# Check if required commands are available
for cmd in ffmpeg ffprobe; do
    if ! command -v $cmd &> /dev/null; then
        echo "Error: $cmd could not be found"
        exit 1
    fi
done

if [ "$#" -ne 2 ]; then
    echo "Warning: Input arguments not set correctly."
    echo "Usage: $0 <input_file> <target_file_size_in_MiB>"
    exit 1
fi

INPUT="${1}"
TARGET_SIZE_MB="${2}"

if [ ! -f "${INPUT}" ]; then
    echo "Error: Input file does not exist."
    exit 1
fi

if ! [[ "${TARGET_SIZE_MB}" =~ ^[0-9]+$ ]]; then
    echo "Error: Target file size must be a positive integer."
    exit 1
fi

# ultrafast
# superfast
# veryfast
# faster
# fast
# medium
# slow
# slower
# veryslow 
PRESET="medium"

AUDIO_BITRATE_KBITS=$((128)) # 128k audio bitrate in kbits

# Get duration in seconds
DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${INPUT}")

# Constants for bitrate calculations
BITRATE_CONVERSION_FACTOR=8388.608 # Convert MiB to kbits

# Calculate target total bitrate in kbits
TARGET_TOTAL_BITRATE_KBITS=$(( (${TARGET_SIZE_MB} * ${BITRATE_CONVERSION_FACTOR}) / DURATION ))

# Calculate video bitrate by subtracting audio bitrate
VIDEO_BITRATE_KBITS=$((${TARGET_TOTAL_BITRATE_KBITS} - ${AUDIO_BITRATE_KBITS}))

# Round video bitrate to nearest whole number
VIDEO_BITRATE_KBITS=$(printf "%.0f" ${VIDEO_BITRATE_KBITS})

# Convert bitrates to bit/s for ffmpeg
VIDEO_BITRATE="${VIDEO_BITRATE_KBITS}k"
AUDIO_BITRATE="${AUDIO_BITRATE_KBITS}k"

echo "Target Video Bitrate: ${VIDEO_BITRATE}"

ffmpeg -y \
  -i "${INPUT}" \
  -preset "${PRESET}" \
  -vf "fps=30" \
  -c:v libx264 \
  -crf 25 \
  -b:v "${VIDEO_BITRATE}" \
  -c:a aac \
  -b:a "${AUDIO_BITRATE}" \
  -maxrate 2500k \
  -bufsize 5000k \
  -movflags +faststart \
  "${INPUT%.*}_converted.mp4"

echo "Conversion completed: ${INPUT%.*}_converted.mp4"

# Perform two-pass encoding
# ffmpeg -y -i "${INPUT}" -preset "${PRESET}" -c:v libx264 -b:v "${VIDEO_BITRATE}" -pass 1 -an -f null /dev/null
# ffmpeg -y -i "${INPUT}" -preset "${PRESET}" -c:v libx264 -b:v "${VIDEO_BITRATE}" -pass 2 -c:a aac -b:a "${AUDIO_BITRATE}" "${INPUT%.*}_converted.mp4"
