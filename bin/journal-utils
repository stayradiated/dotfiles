#!/usr/bin/env python3
# vim: set ft=python

# alias jj='cd $(journal-utils --root)'
# alias jd='nvim $(journal-utils --day)'
# alias jw='nvim $(journal-utils --week)'

import datetime
import argparse
import os.path
import re

parser = argparse.ArgumentParser()

parser.add_argument("--root", help="Print root path", action='store_true')
parser.add_argument("--week", help="Create week notes", action='store_true')
parser.add_argument("--day", help="Create day notes", action='store_true')
parser.add_argument("--list", help="Create list", action='store')

args = parser.parse_args()

today = datetime.date.today()

root_dir = "/home/admin/src/github.com/stayradiated/obsidian/Journal"

year = today.year
week = int(today.strftime('%U')) + 1
month = today.month
day = today.day

def format_title (text):
    underline = "=" * len(text)
    return f"{text}\n{underline}"

def get_previous_day (year, month, day):
    a = datetime.date(year, month, day)
    b = a - datetime.timedelta(days=1)
    return [b.year, b.month, b.day]

def path_for_journal_entry_for_date (year, month, day):
    padded_month = str(month).rjust(2, '0')
    padded_day = str(day).rjust(2, '0')
    # convert integer month to name
    # i.e. 05 -> May
    month_name = datetime.date(1900, month, 1).strftime('%B')
    return f"{root_dir}/public/{year}/{padded_month}/{padded_day} {month_name} {year}.md"

def extract_todo_list (content):
    match = re.search(r"TODO\n----\s+((?:- \[[\sx.]\] .+\n)+)", content, re.MULTILINE)
    if not match:
        return ""
    todo_items = match.group(1)
    return todo_items

if args.root:
    print(root_dir)
    exit(0)

if args.list:
    print(f"{root_dir}/public/lists/{args.list}.txt")
    exit(0)

if args.week:
    note = {
        "path": f"{root_dir}/public/{year}/week/{week}.txt",
        "content": format_title(f"Week {week}"),
    }
else:
    previous_entry_path = path_for_journal_entry_for_date(*get_previous_day(year, month, day))
    previous_todo_items = ""
    if os.path.exists(previous_entry_path):
        with open(previous_entry_path) as file:
            content = file.read()
            previous_todo_items = extract_todo_list(content)

    note = {
        "path": path_for_journal_entry_for_date(year, month, day),
        "content": format_title(today.strftime("%A %d %b %Y")) + f'\n\nTODO\n----\n\n{previous_todo_items}',
    }

if not os.path.exists(note["path"]):
    os.makedirs(os.path.dirname(note["path"]), exist_ok=True)
    with open(note["path"], "w+") as file:
        file.write(note["content"])

print(note["path"])
