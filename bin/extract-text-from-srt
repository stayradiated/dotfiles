#!/usr/bin/env bun

import Parser from 'srt-parser-2';

// Usage: cat *.srt | extract-text-from-srt

const rawContent = await Bun.stdin.text('utf-8')

const parser = new Parser()
const entries = parser.fromSrt(rawContent);

const parseTime = (value) => {
  // 00:00:00,000 â†’ 0
  const match = value.match(/^(\d+):(\d+):(\d+),(\d+)$/)
  if (!match) {
    throw new Error(`Invalid time format: ${value}`)
  }
  const [_, hours, minutes, seconds, milliseconds] = match
  return parseInt(hours) * 3600 + parseInt(minutes) * 60 + parseInt(seconds) + parseInt(milliseconds) / 1000
}

const result = entries.reduce((state, entry) => {
  const startTime = parseTime(entry.startTime)
  const endTime = parseTime(entry.endTime)

  const timeDiff = startTime - state.previousTime
  if (timeDiff > 1) {
    state.text.push('\n\n')
  }
  state.previousTime = endTime

  let text = entry.text
  let speaker = undefined

  const match = text.match(/^(.*?):\s+(.*)$/)
  if (match) {
    speaker = match[1]
    text = match[2]
  }
  if (speaker && speaker !== state.previousSpeaker) {
    state.text.push(`\n${speaker}:`)
    state.previousSpeaker = speaker
  }

  state.text.push(text)


  return state
}, {
  text: [],
  previousSpeaker: '',
  previousTime: 0,
});

console.log(result.text.join(' '));
