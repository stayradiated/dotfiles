#!/usr/bin/env bun

import { execSync } from "child_process";

// Function to fetch the list of timestamps using the `gh` tool
const fetchTimestamps = (): string[] => {
  try {
    const output = execSync("gh pr list --limit 100 --json updatedAt", {
      encoding: "utf-8",
    });
    const prs = JSON.parse(output);
    return prs.map((pr: { updatedAt: string }) => pr.updatedAt);
  } catch (error) {
    console.error("Error fetching timestamps:", error);
    return [];
  }
};

// Function to get the start of the week for a given date
const getStartOfWeek = (date: Date): Date => {
  const startOfWeek = new Date(date);
  const dayOfWeek = date.getUTCDay();
  const diff =
    startOfWeek.getUTCDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
  startOfWeek.setUTCDate(diff);
  startOfWeek.setUTCHours(0, 0, 0, 0);
  return startOfWeek;
};

// Function to bucket timestamps by week
const bucketByWeek = (timestamps: string[]): Record<string, number> => {
  const bucketed: Record<string, number> = {};

  timestamps.forEach((timestamp) => {
    const date = new Date(timestamp);
    const startOfWeek = getStartOfWeek(date).toISOString();
    if (!bucketed[startOfWeek]) {
      bucketed[startOfWeek] = 0;
    }
    bucketed[startOfWeek]++;
  });

  return bucketed;
};

// Function to create an ASCII graph
const createAsciiGraph = (bucketedCounts: Record<string, number>): string => {
  const currentDate = new Date();
  const startOfCurrentWeek = getStartOfWeek(currentDate).toISOString();

  const sortedWeeks = Object.keys(bucketedCounts).sort(
    (a, b) => new Date(b).getTime() - new Date(a).getTime(),
  );
  const weeksOld: { [key: string]: number } = {};

  sortedWeeks.forEach((week, index) => {
    const diffWeeks = Math.floor(
      (new Date(startOfCurrentWeek).getTime() - new Date(week).getTime()) /
        (1000 * 60 * 60 * 24 * 7),
    );
    const label =
      diffWeeks === 0
        ? "This Week"
        : `${diffWeeks} Week${diffWeeks > 1 ? "s" : ""} Old`;
    weeksOld[label] = (weeksOld[label] || 0) + bucketedCounts[week];
  });

  const maxCount = Math.max(...Object.values(weeksOld));
  const graphLines = Object.entries(weeksOld)
    .map(([week, count]) => {
      const bar = "â–ˆ".repeat((count / maxCount) * 50); // Adjust 50 for desired width
      return `| ${week.padEnd(12)} | ${count.toString().padStart(3, " ")} | ${bar}`;
    })
    .join("\n");

  return graphLines;
};

// Fetch timestamps
const timestamps = fetchTimestamps();

// Bucket timestamps by week
const bucketedCounts = bucketByWeek(timestamps);

// Create and display the ASCII graph
const asciiGraph = createAsciiGraph(bucketedCounts);
console.log(asciiGraph);
