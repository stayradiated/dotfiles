#!/usr/bin/env bash
#
# Copyright (c) Mark Maglana
# Inspired by https://github.com/johanhaleby/bash-templater
#         and https://github.com/lavoiesl/bash-templater
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
set -eu

no_empty=false
error=false

case $1 in
    -e|--no-empty)
    no_empty=true
    shift
    ;;
esac

# Get all variable names used in the template
varnames=$(grep -oE '\{\{([A-Za-z0-9_]+)\}\}' $1 | sed -rn 's/.*\{\{([A-Za-z0-9_]+)\}\}.*/\1/p' | sort | uniq)

# Initialize the string of expressions to be used with sed
expressions=""

for varname in $varnames; do
        # Check if the variable named $varname is defined
        if [ -z ${!varname+x} ]; then
                if [[ $error = false ]]; then
                        echo "Error found in file $1:" >&2
                fi
                echo "ERROR: $varname is not defined" >&2
                error=true
        elif [ $no_empty = true ] && [ -z ${!varname} ]; then
                if [[ $error = false ]]; then
                        echo "Error found in file $1:" >&2
                fi
                echo "ERROR: $varname is empty" >&2
                error=true
        else
                # Get the value of the variable named $varname and escape
                # all forward slashes so that it doesn't break sed
                value="$(echo "${!varname}" | sed 's/\//\\\//g')"
                expressions+="-e 's/\{\{$varname\}\}/${value}/g' "
        fi
done

if [[ $error = true ]]; then
        exit 1
elif [[ -n $expressions ]]; then
        cat $1 | eval sed -r "$expressions"
        exit 0
else
        cat $1
        exit 0
fi
