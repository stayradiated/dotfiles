" Load Plugins
" -----------------------------------------------------------------------------

if has('vim_starting')
  set runtimepath+=~/.config/nvim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.config/nvim/bundle/'))

" NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" VimProc
NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin'  : 'make -f make_cygwin.mak',
\     'mac'     : 'make -f make_mac.mak',
\     'linux'   : 'make',
\     'unix'    : 'gmake',
\    },
\ }

" Themes
NeoBundle 'stayradiated/vim-termorrow'
NeoBundle 'w0ng/vim-hybrid'
" NeoBundle 'whatyouhide/vim-gotham'
" NeoBundle 'noahfrederick/vim-noctu'
NeoBundle 'reedes/vim-colors-pencil'
NeoBundle 'lucy/term.vim'
NeoBundle 'chriskempson/base16-vim'

" Extensions
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'jeetsukumaran/vim-filebeagle'
" NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tpope/vim-sensible'
NeoBundle 'christoomey/vim-tmux-navigator'
" NeoBundle 'floobits/floobits-neovim'
" NeoBundle 'sjl/gundo.vim'

" Editing
NeoBundle 'scrooloose/syntastic'
NeoBundle 'mtscout6/syntastic-local-eslint.vim'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
" NeoBundle 'mattn/emmet-vim'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'godlygeek/tabular'
NeoBundle 'rizzatti/dash.vim'
NeoBundle 'danro/rename.vim'

NeoBundle 'junegunn/fzf'

" Languages
" NeoBundle 'kchmck/vim-coffee-script'
" NeoBundle 'nelstrom/vim-markdown-folding'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'mxw/vim-jsx'
" NeoBundle 'othree/yajs.vim'
" NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'fatih/vim-go'
NeoBundle 'elzr/vim-json'
" NeoBundle 'cespare/vim-toml'
" NeoBundle 'cespare/vim-go-templates'
" NeoBundle 'jeroenbourgois/vim-actionscript'

call neobundle#end()

filetype plugin indent on

" Check for uninstalled plugins
NeoBundleCheck

" Settings
" -----------------------------------------------------------------------------

" General
set completeopt-=preview " don't show preview window
set hidden               " hide when switching buffers, don't unload
set spelllang=en_nz      " spell check with New Zealand English
set title                " use filename in window title
set gdefault             " replace everything by default
set visualbell           " stop the beep
set colorcolumn=80       " for cleaner code
set showtabline=0        " hide tab line
" set synmaxcol=120        " Limit syntax highlighting
set number
set relativenumber

" Backup swap files
set backup
set backupdir=~/.config/nvim/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.config/nvim/tmp
set writebackup

" Infinite undo
set undofile
set undodir=~/.config/nvim/undo
set undolevels=1000
set undoreload=10000

" Folding
set foldignore=          " don't ignore anything when folding
set foldlevelstart=99    " no folds closed on open
set foldmethod=marker    " collapse code using markers
set foldmarker={,}       " set markers

" Tabs
set expandtab            " replace tabs with spaces
set shiftwidth=2         " spaces for autoindenting
set softtabstop=2        " spaces for editing, e.g. <Tab> or <BS>
set tabstop=2            " spaces for <Tab>

" Searches
set hlsearch             " highlight search results
set ignorecase           " case insensitive searching
set smartcase            " override ignorecase if upper case typed

" Colourscheme
let g:pencil_terminal_italics=1
let g:pencil_spell_undercurl=1
let g:hybrid_use_Xresources=1

set background=dark
colorscheme termorrow
" set background=light
" colorscheme pencil

" Mapping
" -----------------------------------------------------------------------------

" Map Leader to space
let mapleader = " "

" Remap Tab to %
map <BS> %

" Escape terminal mode
if has('nvim')
  tnoremap <leader>e <c-\><c-n>
endif

" Toggle fold
nnoremap <leader><space> za

" Toggle hlsearch for current results
nnoremap <leader>h :nohlsearch<CR>

" Search for trailing whitespace
nnoremap <leader>W /\s\+$<CR>

" Toggle last active bufer
nnoremap <leader><Tab> :b#<CR>

" Delete a buffer without closing the window
nnoremap <leader>d :bp<bar>sp<bar>bn<bar>bd<CR>

" Remember selection when indenting
vnoremap > >gv
vnoremap < <gv

" Better movement over wrapped lines
nnoremap j gj
nnoremap k gk
nnoremap gk k
nnoremap gk j

" Paste mode for terminals
nnoremap <leader>P :set invpaste paste?<CR>
vnoremap <leader>y y:call ClipboardYank()<CR>
vnoremap <leader>d d:call ClipboardYank()<CR>
nnoremap <leader>p :call ClipboardPaste()<CR>p

" Quick save
nnoremap <leader>w :w<CR>

" Shortcut for Tabularize
vnoremap <leader>t :Tabularize /
vnoremap <leader>T :Tabularize /:\zs/l0l1<CR>

" Check file for errors
nnoremap <leader>c :SyntasticCheck<CR>

" Show Quickfix window for Syntastic errors
nnoremap <leader>e :Errors<CR>

" FZF
nnoremap <leader>t :FZF<CR>

" Unite.vim
" nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async<CR>
nnoremap <leader>b :<C-u>Unite -no-split -buffer-name=buffer  -start-insert buffer<CR>
nnoremap <leader>/ :<C-u>Unite -no-split -buffer-name=buffer  -start-insert line<CR>
nnoremap <leader>a :<C-u>Unite -no-split -buffer-name=buffer  -start-insert grep:.<CR>

" Keep search pattern at the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz

" Quick search
nnoremap <leader>r :%s/<C-r><C-w>/
nnoremap <leader>R :%s/<C-r><C-a>/
vnoremap <leader>s :%s/\%V<c-r><c-w>/

" Dash
nmap <silent> K <Plug>DashSearch

" Plugin Settings
" ----------------------------------------------------------------------------

" vim-go
" let g:go_fmt_command = "goimports"
let g:syntastic_go_checkers = ['golint', 'go vet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" Syntastic
let g:syntastic_javascript_checkers=['eslint']
" let g:syntastic_javascript_checkers=['jshint']
let g:syntastic_json_checkers=['jsonlint']
let g:syntastic_coffee_coffeelint_args='-f ~/.lint.json'
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '!'
let g:syntastic_html_checkers=['']
let g:syntastic_always_populate_loc_list = 1

" Unite.vim
let g:unite_source_history_yank_enable = 1
let g:unite_source_grep_max_candidates = 200

call unite#custom#profile('default', 'context', { 'marked_icon':'✓'})
" call unite#custom_default_action('directory,directory_mru', 'cd')

" Let's use pt
let g:unite_source_rec_async_command = 'pt --nogroup --nocolor -S -g .'

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  " Reload directory contents
  imap <buffer> <C-r>   <Plug>(unite_redraw)
endfunction

" JSX
let g:jsx_ext_required = 0

" Functions
" -----------------------------------------------------------------------------

function! ClipboardYank()
  if has('mac')
    call system('pbcopy', @@)
  else
    call system('xsel -i -b', @@)
  endif
endfunction

function! ClipboardPaste()
  if has('mac')
    let @@ = system('pbpaste')
  else
    let @@ = system('xsel -b')
  endif
endfunction

" Autocommands
" -----------------------------------------------------------------------------

" Markdown
autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd FileType markdown setlocal tw=79

" Silverstripe
autocmd BufNewFile,BufRead *.ss set filetype=html

" Go
autocmd FileType go setlocal ts=2 sw=2 sts=2

" CSS
autocmd BufNewFile,BufRead *.css set filetype=sass
